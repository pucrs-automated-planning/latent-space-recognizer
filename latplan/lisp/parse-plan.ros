#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#

#|

This reads a plan file generated by the planner,
simulate the plan to obtain the propositional intermediate states,
and writes it in the same csv format to the standard output.

The script is capable of handle the value of 2 (don't care) in the action description,
but in AMA1 this is not used. Just 0 = false, 1 = true.

|#

(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(cl-csv iterate alexandria trivia.ppcre) :silent t)
  )

(defpackage :ros.script.to-sas.3690427216
  (:use :cl :cl-csv :iterate :alexandria :trivia :trivia.ppcre))
(in-package :ros.script.to-sas.3690427216)

(defun apply-action (action state)
  (iter (with dim = (/ (length action) 2))
        (for value1 in (subseq action 0 dim))
        (for value2 in (subseq action dim))
        (for z in state)
        (match value1
          (2 nil)
          (0 (assert (= value1 z)))
          (1 (assert (= value1 z))))
        (collect
            (ematch value2
              (2 z)
              (1  1)
              (0  0)))))

(defun simulate (state actions)
  (cons state
        (ematch actions
          (nil nil)
          ((cons action rest)
           (simulate (apply-action action state)
                     rest)))))

(defun main (planfile &rest init)
  (format t "~{~{~a ~}~%~}"
          (simulate
           (mapcar #'read-from-string init)
           (iter (for action in-file planfile)
                 (collect
                     (ematch action
                       ((list (symbol :name (and name (string* #\A))))
                        (map 'list (compose #'read-from-string #'string)
                             (subseq name 1))))))))
  t)
