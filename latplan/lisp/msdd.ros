#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros dynamic-space-size=16000 -Q -- $0 "$@"
|#

#|

This is a failed attempt to learn the action model from the symbolic transitions,
using a data mining technique called MSDD.

Oates, Tim, and Paul R. Cohen. "Searching for structure in multiple streams of data." ICML. Vol. 96. 1996.

|#



;;; setup
(progn ;;init forms
  #+quicklisp (ql:quickload '(iterate alexandria trivia.ppcre immutable-struct swank
                              priority-queue simpsamp lparallel) :silent t)
  )

(defpackage :msdd
  (:use :cl :iterate :alexandria :trivia :trivia.ppcre :priority-queue :lparallel)
  (:shadowing-import-from :immutable-struct :ftype :defstruct))
(in-package :msdd)
(SETF *ARITY-CHECK-BY-TEST-CALL* NIL)
;; (setf (sb-ext:bytes-consed-between-gcs) 100000000)
(defvar *num-processes*
    (read-from-string
     (uiop:run-program "cat /proc/cpuinfo | grep -c processor" :output :string)))
;; (setf *kernel* (make-kernel *num-processes*))
(defmacro print-variables (&rest args)
  `(progn
     (print (list ,@(iter (for arg in args)
                          (collect `(quote ,arg))
                          (collect arg)))
            *error-output*)
     (finish-output *error-output*)))
;;; set up the learning data

(defun read-as-bvs (csv)
  (iter (for line in-file csv using #'read-line)
        (for bv = (iter (for o in-stream (make-string-input-stream line))
                        (collect o result-type bit-vector)))
        (when (plusp (length bv))
          (collect bv))))

(defun bvs-array (bvs)
  "Stores the bit vectors into a single large bit vector, then
 returns an array displaced to the underlying bitvector"
  (let ((batch (length bvs))
        (w (/ (length (first bvs)) 2)))
    (let* ((arm (make-array (* batch 2 w)  :element-type 'bit)))
      (iter (for b below batch)
            (for bv in bvs)
            (replace arm bv :start1 (* b 2 w) :end1 (* (1+ b) 2 w)))
      arm)))

;;; print the pddl domain

(defclass _nil () ())
(defun _nil () (make-instance '_nil))
(defmethod print-object ((object _nil) stream)
  (write-string "()" stream))

(defun sym (&rest args)
  (intern (format nil "~{~a~}" args)))

(defun z (dim)
  "(z 0) returns a form (Z0) and alike"
  (list (sym 'z dim)))

(defun make-domain (data)
  (let* ((dim (/ (length (first data)) 2))
         (dims (iota dim)))
    `(define (domain latent)
         (:requirements :strips :negative-preconditions)
       (:predicates
        ,@(mapcar #'z dims))
       ,@(iter (for transition in data)
               (for from = (subseq transition 0 dim))
               (for to   = (subseq transition dim))
               (for i from 0)
               (collect
                   `(:action ,(sym 'a (apply #'concatenate 'string
                                             (map 'list #'princ-to-string transition)))
                     :parameters ,(_nil) ;TODO: Is it possible to use parameters in our framework?
                     :precondition
                     (and ,@(iter (for d in dims)
                                  (for value in-vector from)
                                  (match value
                                    (2 nil)
                                    (1 (collect (z d)))
                                    (0 (collect `(not ,(z d)))))))
                     :effect
                     (and ,@(iter (for d in dims)
                                  (for value1 in-vector from)
                                  (for value2 in-vector to)
                                  (ematch* (value1 value2)
                                    ((_ 2) nil)
                                    ((2 1) (collect (z d)))
                                    ((2 0) (collect `(not ,(z d))))
                                    ((0 0) nil)
                                    ((1 1) nil)
                                    ((0 1) (collect (z d)))
                                    ((1 0) (collect `(not ,(z d)))))))))))))

;;; search data structure

(deftype sf () 'single-float)
(deftype fn () 'fixnum)
(deftype half () `(unsigned-byte ,(1- (/ (floor (log most-positive-fixnum 2)) 2))))

(defun multitoken (width)
  (make-array width :initial-element 1 :element-type 'bit :adjustable nil :fill-pointer nil))

(defun copy-multitoken (mt1)
  (let ((mt2 (multitoken (length mt1))))
    (replace mt2 mt1)
    mt2))

(defun required ()
  (error "missing required argument"))

(defstruct node
  ;; (precursor (required) :type simple-bit-vector)
  ;; (successor (required) :type simple-bit-vector)
  ;; (precursor* (required) :type simple-bit-vector)
  ;; (successor* (required) :type simple-bit-vector)
  (data (required) :type simple-bit-vector)
  (mask (required) :type simple-bit-vector))

(defun as-012 (node)
  (ematch node
    ((node data mask)
     (map 'vector (lambda-match*
                    ((_ 1) 2)
                    ((d 0) d)) data mask))))

;;; bit-vector utilities

(defmacro dlet (bindings &body body)
  `(let ,bindings
     (declare (dynamic-extent ,@(mapcar (compose #'first #'ensure-list) bindings)))
     ,@body))
(defmacro dlet* (bindings &body body)
  `(let* ,bindings
     (declare (dynamic-extent ,@(mapcar (compose #'first #'ensure-list) bindings)))
     ,@body))


(declaim (inline make-bit-vector))
(ftype make-bit-vector half simple-bit-vector)
(defun make-bit-vector (length)
  (make-array length :element-type 'bit))

(declaim (inline bit-if-then-else))
(ftype bit-if-then-else bit-vector bit-vector bit-vector &optional bit-vector bit-vector)
(defun bit-if-then-else (condition then else
                         &optional (res (make-bit-vector (length condition))))
  "if a then b else c"
  (declare (optimize (speed 3) (safety 0)))
  (dlet ((tmp (make-bit-vector (length condition))))
    (bit-and then condition tmp)
    (bit-andc2 else condition res)
    (bit-ior tmp res res)
    res))

(assert (equal (bit-if-then-else #*00001111
                                 #*00110011
                                 #*01010101)
               #*01010011))


(declaim (inline bit-implies))
(ftype bit-implies bit-vector bit-vector &optional bit-vector bit-vector)
(defun bit-implies (bv1 bv2 &optional (bv3 (make-array (length bv1) :element-type 'bit)))
  "a => b :- not a or b"
  (bit-not bv1 bv3)
  (bit-ior bv2 bv3 bv3)
  bv3)

;;; other utils

(defmacro dotimes-inline ((var count &optional result-form) &body body &environment env)
  (check-type var symbol)
  (let ((count (macroexpand count env)))
    (assert (and (constantp count) (numberp count)))
    (iter (for c to count)
          (when (first-iteration-p)
            (collect 'progn))
          (collect
              (if (< c count)
                  `(symbol-macrolet ((,var ,c))
                     ,@body)
                  result-form)))))

(defmacro dotimes-unroll4 ((base offset
                            count unroll
                            &optional result)
                           &body body
                           &environment env)
  (with-gensyms (quat mod nth-loop)
    (let ((unroll (macroexpand unroll env))
          (delta (gensym "D")))
      `(let ((,base 0))
         (declare (fixnum ,base))
         (multiple-value-bind (,quat ,mod) (floor ,count ,unroll)
           (declare (fixnum ,quat)
                    ((mod ,unroll) ,mod))
           (symbol-macrolet ((,delta ,unroll))
             (dotimes (,nth-loop ,quat)
               (declare (ignorable ,nth-loop))
               (dotimes-inline (,offset ,unroll)
                 ,@body)
               (incf ,base ,delta)))
           (symbol-macrolet ((,delta 1)
                             (,offset 0))
             (dotimes (,nth-loop ,mod)
               ,@body
               (incf ,base ,delta)))
           ,result)))))


;;; node evaluation functions

(declaim (inline wickens-cooccurence-g))
(ftype wickens-cooccurence-g real real real real sf)
(defun wickens-cooccurence-g (n1 n2 n3 n4)
  "
Following the definition in Oates,Cohen,ICML96. See also:
Wickens, T. D. 1989. Multiway Contingency Tables Analysis for the Social Sciences. Lawrence Erlbaum Associates.
"
  (let* ((n1 (float n1))
         (n2 (float n2))
         (n3 (float n3))
         (n4 (float n4))
         (1/all (/ (+ n1 n2 n3 n4)))
         (r1 (+ n1 n2))
         (c1 (+ n1 n3))
         (r2 (+ n3 n4))
         (c2 (+ n2 n4))
         (n1^ (* r1 c1 1/all))
         (n2^ (* r1 c2 1/all))
         (n3^ (* r2 c1 1/all))
         (n4^ (* r2 c2 1/all)))
    (* 2
       ;; adding 1e-6 to prevent division-by-zero
       (+ (* n1 (log (/ (+ 1e-6 n1) (+ 1e-6 n1^))))
          (* n2 (log (/ (+ 1e-6 n2) (+ 1e-6 n2^))))
          (* n3 (log (/ (+ 1e-6 n3) (+ 1e-6 n3^))))
          (* n4 (log (/ (+ 1e-6 n4) (+ 1e-6 n4^))))))))

(declaim (inline cross-entropy))
(ftype cross-entropy real real real real sf)
(defun cross-entropy (n1 n2 n3 n4)
  "Using this instead of wickens-cooccurence-g because
 this value is normalized against the total sample size."
  (let* ((n1 (float n1))
         (n2 (float n2))
         (n3 (float n3))
         (n4 (float n4))
         (1/all (/ (+ n1 n2 n3 n4)))
         (r1 (+ n1 n2))
         (c1 (+ n1 n3))
         (r2 (+ n3 n4))
         (c2 (+ n2 n4))
         (n1^ (* r1 c1 1/all))
         (n2^ (* r1 c2 1/all))
         (n3^ (* r2 c1 1/all))
         (n4^ (* r2 c2 1/all)))
    (* 1/all
       ;; adding 1e-6 to prevent division-by-zero
       (+ (* n1 (log (/ (+ 1e-6 n1) (+ 1e-6 n1^))))
          (* n2 (log (/ (+ 1e-6 n2) (+ 1e-6 n2^))))
          (* n3 (log (/ (+ 1e-6 n3) (+ 1e-6 n3^))))
          (* n4 (log (/ (+ 1e-6 n4) (+ 1e-6 n4^))))))))

(ftype msdd-gmax1 fn fn fn fn sf)
(defun msdd-gmax1 (n1 n2 n3 n4)
  (max (cross-entropy n1 n2 0 (+ n3 n4))
       (cross-entropy 0 (+ n1 n2) n3 n4)))

(ftype msdd-gmax2 fn fn fn fn sf)
(defun msdd-gmax2 (n1 n2 n3 n4)
  (max (let ((tmp1 (+ n2 n3 n4)))
         (if (<= n1 tmp1)
             (cross-entropy n1 0 0 tmp1)
             (let ((all/2 (/ (+ n1 tmp1) 2)))
               (cross-entropy all/2 0 0 all/2))))
       (cond
         ((>= n1 (abs (- n2 n3)))
          (let ((tmp2 (+ n1 n2 n3)))
            (cross-entropy 0 tmp2 tmp2 n4)))
         ((> n2 n3)
          (cross-entropy 0 n2 (+ n1 n3) n4))
         (t
          (cross-entropy 0 (+ n1 n2) n3 n4)))))

(ftype msdd-gmax3 node fn fn fn fn sf)
(defun msdd-gmax3 (node n1 n2 n3 n4)
  (declare (optimize (speed 3) (safety 0)))
  (match node
    ((node mask)
     (dlet* ((width2 (length mask))
             (width (/ width2 2))
             (successor-* (make-bit-vector width)))
       (declare (half width2))
       (replace successor-* mask :start1 0 :end1 width :start2 width :end2 width2)
       (if (not (zerop (count 0 successor-*)))
           ;; non-empty successor
           (msdd-gmax1 n1 n2 n3 n4)
           ;; empty successor
           (msdd-gmax2 n1 n2 n3 n4))))))




(ftype contingency-table half half node simple-bit-vector (values fn fn fn fn))
(defun contingency-table (batch width node array)
  (declare (optimize (speed 3) (safety 0)))
  (ematch* (node)
    (((node data mask))
     (dlet* ((n1 0) (n2 0) (n3 0) (n4 0)
             (width2 (* 2 width))
             (precursor   (make-bit-vector width))
             (successor   (make-bit-vector width))
             (precursor-* (make-bit-vector width))
             (successor-* (make-bit-vector width))
             (zero (make-bit-vector width))
             (one  (make-bit-vector width))
             (before-state (make-bit-vector width))
             (after-state  (make-bit-vector width))
             (prec-matching (make-bit-vector width))
             (succ-matching (make-bit-vector width)))
       (declare (fixnum n1 n2 n3 n4)
                (half width2))
       (replace precursor data :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor data :start1 0 :end1 width :start2 width :end2 width2)
       (replace precursor-* mask :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor-* mask :start1 0 :end1 width :start2 width :end2 width2)
       (fill zero 0)
       (fill one 1)
       (dotimes-unroll4 (b offset batch 2)
         (let* ((i1 (the fixnum (* (the fixnum (+ b offset)) width2)))
                (i2 (the fixnum (+ i1 width)))
                (i3 (the fixnum (+ i2 width))))
           (replace before-state array :start2 i1 :end2 i2)
           (replace after-state  array :start2 i2 :end2 i3))
         ;; `don't-care' precursors match against any values
         (bit-eqv before-state precursor prec-matching)
         (bit-ior prec-matching precursor-* prec-matching)
         ;; `don't-care' effects match against any values
         (bit-eqv after-state successor succ-matching)
         (bit-ior succ-matching successor-* succ-matching)
         (ematch* ((equal one prec-matching)
                   (equal one succ-matching))
           ((t t)     (incf n1))
           ((t nil)   (incf n2))
           ((nil t)   (incf n3))
           ((nil nil) (incf n4))))
       (values n1 n2 n3 n4)))))

;;; Pruning rule for action schema

(ftype valid-node node half boolean)
(defun valid-node (node width)
  (declare (optimize (speed 3) (safety 0)))
  (match node
    ((node data mask)
     (dlet* ((width2 (* 2 width))
             (precursor   (make-bit-vector width))
             (successor   (make-bit-vector width))
             (precursor-* (make-bit-vector width))
             (successor-* (make-bit-vector width))
             (zero (make-bit-vector width))
             (one  (make-bit-vector width)))
       (replace precursor data :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor data :start1 0 :end1 width :start2 width :end2 width2)
       (replace precursor-* mask :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor-* mask :start1 0 :end1 width :start2 width :end2 width2)
       (fill zero 0)
       (fill one 1)
       (and
        (dlet ((tmp (make-bit-vector width)))
          ;; 1. same bit should not specify the same value (p4,left,par3)
          (bit-eqv precursor successor tmp) ; same bits get 1; all bits should be 0
          (bit-andc2 tmp precursor-* tmp)   ; however, masked bits are ok
          (bit-andc2 tmp successor-* tmp)   ; same for successors
          ;; all zero
          (equal zero tmp)))))))

(ftype valid-leaf-node node half boolean)
(defun valid-leaf-node (node width)
  (declare (optimize (speed 3) (safety 0)))
  (match node
    ((node data mask)
     (dlet* ((width2 (* 2 width))
             (precursor   (make-bit-vector width))
             (successor   (make-bit-vector width))
             (precursor-* (make-bit-vector width))
             (successor-* (make-bit-vector width))
             (zero (make-bit-vector width))
             (one  (make-bit-vector width)))
       (replace precursor data :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor data :start1 0 :end1 width :start2 width :end2 width2)
       (replace precursor-* mask :start1 0 :end1 width :start2 0 :end2 width)
       (replace successor-* mask :start1 0 :end1 width :start2 width :end2 width2)
       (fill zero 0)
       (fill one 1)
       (and
        ;; successor should specify at least one bit
        (dlet ()
          (not (equal one successor-*)))
        (dlet ((tmp1 (make-bit-vector width))
               (tmp2 (make-bit-vector width))
               (tmp3 (make-bit-vector width)))
          ;; 2. actions should encode changes
          ;; == when the effect specifies something (0), then the precursor should be specified (0)
          ;; and it should be different
          (bit-not precursor-* tmp1)
          (bit-not successor-* tmp2)
          (bit-implies tmp2 tmp1 tmp3)
          (equal one tmp3)))))))

;;; MSDD algorithm

(ftype expand node list)
(defun expand (node)
  (match node
    ((node data mask)
     (flet ((specify (multitoken index what)
              (let ((mt2 (copy-multitoken multitoken)))
                (setf (aref mt2 index) what)
                mt2)))
       ;; specify 1 bit of the precursor or the successor.
       ;; Since the precursor and the successor are the displaced arrays to
       ;; a single underlying data array,
       ;; we can iterate over the underlying array.
       (let ((rightmost (or (position 0 mask :from-end t) -1)))
         (iter (for i from (1+ rightmost) below (length data))
               (collect (node (specify data i 0) (specify mask i 0)))
               (collect (node (specify data i 1) (specify mask i 0)))))))))

(defun progress (width)
  (let ((count 0))
    (lambda (&optional (char #\.) &rest args)
      (princ char)
      (incf count)
      (when (< width count)
        (progn (setf count 0)
               (format t " ~{~a~^ ~}~%" args)))
      (finish-output))))

;; it seems there are still some magic happening here... 

(defun bistate-msdd (batch width array g-threashold max-schema)
  "A modification of Oates, Cohen, ICML16 on binary variables with lag fixed to 1.
Also, instead of working on the sequence of states, it works on individual pairs of states."
  (let ((open (make-pqueue #'> :key-type 'sf :value-type 'node))
        (acc (make-pqueue #'< :key-type 'sf :value-type 'node))
        (lopen (bt:make-lock "open"))
        (lacc (bt:make-lock "acc"))
        threads)
    (labels ((task (node)
               (block nil
                 (multiple-value-bind (n1 n2 n3 n4)
                     (contingency-table batch width node array)
                   ;; Add the node to the results if they are actually good
                   (let ((g (cross-entropy n1 n2 n3 n4))
                         (f (msdd-gmax3 node n1 n2 n3 n4)))
                     ;; (print-variables n1 n2 n3 n4 g f)
                     (when (and (< g-threashold g)
                                (valid-leaf-node node width))
                       (bt:with-lock-held (lacc)
                         (when (or (< (pqueue-length acc) max-schema)
                                   (< (pqueue-front-key acc) g))
                           (pqueue-push node g acc))
                         (when (< max-schema (pqueue-length acc))
                           (pqueue-pop acc))))
                     ;; Add the children to the queue
                     (when (and (< g-threashold f)
                                (bt:with-lock-held (lacc)
                                  (or (< (pqueue-length acc) max-schema)
                                      (< (pqueue-front-key acc) f))))
                       (let ((children (delete-if-not
                                        (lambda (node) (valid-node node width))
                                        (expand node))))
                         (bt:with-lock-held (lopen)
                           (iter (for child in children)
                                 (pqueue-push child f open)))))))))
             (worker ()
               (sleep (random 1.0))
               (block nil
                 (tagbody
                   :start
                   (task
                    (bt:with-lock-held (lacc)
                      (bt:with-lock-held (lopen)
                        (if (or (< (pqueue-length acc) max-schema)
                                (< (pqueue-front-key acc)
                                   (pqueue-front-key open)))
                            (if (pqueue-empty-p open)
                                (go :retry)
                                (pqueue-pop open))
                            (go :end)))))
                   (go :start)
                   :retry
                   (sleep 0.1)
                   (go :start)
                   :end)))
             (single-thread-worker ()
               (iter (until (pqueue-empty-p open))
                     (while (or (< (pqueue-length acc) max-schema)
                                (< (pqueue-front-key acc)
                                   (pqueue-front-key open))))
                     (for i from 0)
                     (when (zerop (rem i 1000))
                       (let ((ub (pqueue-front-key open))
                             (lb (ignore-errors (pqueue-front-key acc)))
                             (len (pqueue-length open)))
                         (print-variables ub lb len)))
                     (task (pqueue-pop open)))))
      (let ((init (node (multitoken (* 2 width))
                        (multitoken (* 2 width)))))
        (pqueue-push init
                     (multiple-value-call
                         #'cross-entropy
                       (contingency-table batch width init array))
                     open))
      (handler-case
          (unwind-protect
              (if (plusp *num-processes*)
                  (unwind-protect
                      (progn
                        (dotimes (i *num-processes*)
                          (push (bt:make-thread #'worker) threads))
                        (iter (while (some #'bt:thread-alive-p threads))
                              (for i from 0)
                              (let ((ub (pqueue-front-key open))
                                    (lb (ignore-errors (pqueue-front-key acc)))
                                    (len (pqueue-length open)))
                                (print-variables ub lb len))
                              (sleep 1)))
                    (map nil #'bt:destroy-thread threads))
                  (single-thread-worker))
            (print-variables acc))
        (SB-SYS:INTERACTIVE-INTERRUPT ())))
    (iter (until (pqueue-empty-p acc))
          (for (values node g) = (pqueue-pop acc))
          (print-variables g node)
          (collect node))))




(defvar *g-threshold* most-negative-short-float)
(defvar *max-schema* most-positive-fixnum)
(defvar *num-samples* nil)
(setf *print-right-margin* 70)
;; (setf *print-pretty* nil)
(defun main (&rest args)
  (match args
    ((list* (or "-d" "--debug") rest)
     (format *error-output* "debug mode on~%")
     (apply #'main "-P" "0" "-s" "2017" "-p" "-t" rest))
    ((list* (or "-g" "--threashold") (read *g-threshold*) rest)
     (check-type *g-threshold* real)
     (apply #'main rest))
    ((list* (or "-s" "--seed") (read seed) rest)
     (check-type seed (unsigned-byte 32))
     (let ((*random-state* (SB-EXT:SEED-RANDOM-STATE seed)))
       (apply #'main rest)))
    ((list* (or "-k" "--max-schema") (read *max-schema*) rest)
     (check-type *max-schema* integer)
     (apply #'main rest))
    ((list* (or "-n" "--num-samples") (read *num-samples*) rest)
     (check-type *num-samples* integer)
     (apply #'main rest))
    ((list* (or "-P" "--num-processes") (read *num-processes*) rest)
     (check-type *num-processes* integer)
     (apply #'main rest))
    ((list* (or "-p" "--profile") rest)
     (swank:profile-reset)
     (swank:profile-package :msdd t nil)
     (sb-profile:unprofile read-as-bvs bvs-array)
     (unwind-protect
         (apply #'main rest)
       (swank:profile-report)))
    ((list* (or "-t" "--time") rest)
     (let ((*trace-output* *error-output*))
       (time (apply #'main rest))))
    ((list csv)
     (let* ((list (read-as-bvs csv))
            (original-batch (length list))
            (width (/ (length (first list)) 2))
            (batch (or *num-samples* original-batch))
            (array (bvs-array
                    (if *num-samples*
                        (simpsamp:list-sample *num-samples* list)
                        list))))
       (format *error-output* "dynamic space: ~aGB~%" (/ (sb-ext:dynamic-space-size) 1e9))
       (format *error-output* "number of threads: ~a~%" *num-processes*)
       (format *error-output* "number of original samples: ~a~%" batch)
       (format *error-output* "encoding length: ~a~%" width)
       (format *error-output* "number of samples: ~a~%" batch)
       (format
        t "~%~(~:S~)~%"
        (make-domain
         (mapcar #'as-012
                 (bistate-msdd batch width array
                               *g-threshold* *max-schema*))))))
    (_
     (format *error-output*
             "Usage: msdd.ros ~
                     [-g,--threashold threashold] ~
                     [-p,--profile] ~
                     [-t,--time] actions.csv~%"))))

;;; vim: set ft=lisp lisp:




