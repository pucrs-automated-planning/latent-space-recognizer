#!/usr/bin/env python3
import warnings
import config
import numpy as np
from model import GumbelAE, Discriminator, default_networks

import keras.backend as K
import tensorflow as tf

float_formatter = lambda x: "%.3f" % x
np.set_printoptions(formatter={'float_kind':float_formatter})

################################################################


from plot import plot_ae

def load(path):
    print("loading {}".format(path), end='...', flush=True)
    data = np.loadtxt(path,dtype=np.int8)
    print("done.")
    return data

def maxdiff(data):
    N = data.shape[1]//2
    pre, suc = data[:,:N], data[:,N:]
    # print(pre.shape)
    # print(pre[:10])
    # print(suc[:10])
    # print(np.abs(pre-suc)[:10])
    # print(np.sum(np.abs(pre-suc),axis=1)[:10])
    # print(np.sum(np.abs(pre-suc),axis=1).shape)
    return np.max(np.sum(np.abs(pre-suc),axis=1))

def main():
    import numpy.random as random
    from trace import trace

    import sys
    if len(sys.argv) == 1:
        sys.exit("{} [directory]".format(sys.argv[0]))

    directory = sys.argv[1]
    directory_ad = "{}_ad/".format(directory)
    print("loading the Discriminator", end='...', flush=True)
    ad = Discriminator(directory_ad).load()
    print("done.")

    # valid_states  = load("{}/states.csv".format(directory))
    valid_actions = load("{}/actions.csv".format(directory))
    threshold = maxdiff(valid_actions)
    print("maxdiff:",threshold)

    states  = load("{}/generated_states.csv".format(directory))

    path = "{}/generated_actions.csv".format(directory)

    total   = states.shape[0]
    N       = states.shape[1]
    acc = 0
   
    try:
        print(path)
        with open(path, 'wb') as f:
            for i,s in enumerate(states):
                print("Iteration {}/{} base: {}".format(i,total,i*total), end=' ')
                diff = np.sum(np.abs(states - s),axis=1)
                neighbors = states[np.where(diff<threshold)]
                tmp_actions = np.pad(neighbors,((0,0),(0,N)),"constant")
                tmp_actions[:,N:] = s
                ys            = ad.discriminate(tmp_actions,batch_size=400000)
                valid_actions = tmp_actions[np.where(ys > 0.8)]
                acc           += len(valid_actions)
                print(len(neighbors),len(valid_actions),acc)
                np.savetxt(f,valid_actions,"%d")
    except KeyboardInterrupt:
        print("dump stopped")

if __name__ == '__main__':
    main()
    
    
"""
XXX still not viable. too many actions


* Summary:

Dump all actions classified as valid by a discriminator.

Input: states generated by EB-discriminator

2190258 states
 362880 states (true variation ---- x7 redundancy)

"""
