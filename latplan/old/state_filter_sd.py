#!/usr/bin/env python3
import warnings
import config
import numpy as np
from model import Discriminator, ConvolutionalGumbelAE2

import keras.backend as K
import tensorflow as tf

float_formatter = lambda x: "%.3f" % x
np.set_printoptions(formatter={'float_kind':float_formatter})

from plot import plot_ae, plot_grid, plot_grid2

def main():
    import sys
    if len(sys.argv) == 1:
        sys.exit("{} [directory]".format(sys.argv[0]))

    directory = sys.argv[1]
    sd = Discriminator("{}/_sd".format(directory)).load()
    ae = ConvolutionalGumbelAE2(directory).load()

    input = "generated_states.csv"
    print("loading {}".format("{}/{}".format(directory,input)), end='...', flush=True)
    states = np.loadtxt("{}/{}".format(directory,input),dtype=np.uint8)
    print("done.")
    zs      = states.view()
    total   = states.shape[0]
    N       = states.shape[1]
    batch   = 500000
    output = "generated_states2.csv"
    try:
        print(ae.local(output))
        with open(ae.local(output), 'wb') as f:
            print("original states:",total)
            for i in range(total//batch+1):
                _zs = zs[i*batch:(i+1)*batch]
                _result = sd.discriminate(_zs,batch_size=5000).round().astype(np.uint8)
                _zs_filtered = _zs[np.where(_result > 0)[0],:]
                print("reduced  states:",len(_zs_filtered),"/",len(_zs))
                
                _xs = ae.decode_binary(_zs_filtered[:20],batch_size=5000).round().astype(np.uint8)
                ae.plot(_xs,path="generated_states_filtered{}.png".format(i))
                
                np.savetxt(f,_zs_filtered,"%d",delimiter=" ")
                
    except KeyboardInterrupt:
        print("dump stopped")

if __name__ == '__main__':
    main()
    
    
"""

* Summary:

Apply Discriminator to the states generated by EB-discriminator (generated_states.csv).
Writes the results to generated_states2.csv.

2190258 states -> 1437332 states
 362880 states (true variation ---- x4 redundancy)


"""
